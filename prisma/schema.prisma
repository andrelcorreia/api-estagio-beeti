generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String              @id @db.VarChar(40)
  email             Bytes
  name              Bytes
  password          String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  active            Boolean             @default(true)
  access_level_id   String?             @db.VarChar(40)
  api_main_logs     api_main_logs[]
  maintenance       maintenance[]
  services_provided services_provided[]
}

model access_level {
  id               String             @id @db.VarChar(40)
  description      String             @db.VarChar(255)
  user_permissions user_permissions[]
}

model api_main_logs {
  id             String   @id @db.VarChar(40)
  user_id        String   @db.VarChar(40)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  body           String?
  status         Int
  route          String
  return_message String   @db.VarChar(255)
  return_data    String?
  method         String   @db.VarChar(8)
  users          users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model clients {
  id                String              @id @db.VarChar(40)
  name              Bytes
  document          Bytes
  full_address      Bytes
  telephone         Bytes
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  active            Boolean             @default(true)
  maintenance       maintenance[]
  services_provided services_provided[]
}

model maintenance {
  id              String           @id @db.VarChar(40)
  description     String           @db.VarChar(255)
  created_at      DateTime         @default(now()) @db.Timestamp(6)
  active          Boolean          @default(true)
  estimated_date  DateTime         @db.Timestamp(6)
  technical_date  Boolean          @default(false)
  user_id         String           @db.VarChar(40)
  client_id       String           @db.VarChar(40)
  product_id      String           @db.VarChar(40)
  occ_id          String?          @db.VarChar(40)
  reminder        Boolean          @default(false)
  openned         Boolean?         @default(false)
  clients         clients          @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  type_occurrence type_occurrence? @relation(fields: [occ_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products        products         @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  id          String        @id @db.VarChar(40)
  name        String        @db.VarChar(255)
  description String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  active      Boolean       @default(true)
  maintenance maintenance[]
}

model services_provided {
  id             String   @id @db.VarChar(40)
  description    String   @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  active         Boolean  @default(true)
  estimated_date DateTime @db.Timestamp(6)
  technical_date Boolean  @default(false)
  user_id        String   @db.VarChar(40)
  client_id      String   @db.VarChar(40)
  clients        clients  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model type_occurrence {
  id          String        @id @db.VarChar(40)
  description String        @db.VarChar(255)
  maintenance maintenance[]
}

model permissions {
  id               String             @id @db.VarChar(40)
  description      String             @db.VarChar(255)
  user_permissions user_permissions[]
}

model user_permissions {
  id              String       @id @db.VarChar(40)
  permissions_id  String       @db.VarChar
  access_level_id String       @db.VarChar
  access_level    access_level @relation(fields: [access_level_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  permissions     permissions  @relation(fields: [permissions_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
